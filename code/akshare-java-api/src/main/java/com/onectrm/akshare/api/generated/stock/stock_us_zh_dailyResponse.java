
/*generated by AKShare JAVA API Generator Sun Jun 12 15:42:02 CST 2022*/
package com.onectrm.akshare.api.generated.stock;

import com.onectrm.akshare.api.JacksonDateDeserializer;
import com.onectrm.akshare.api.JacksonDateTimeDeserializer;
import com.onectrm.akshare.api.AkShareRequestAndResponse;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

/**
* 分类: stock
* 接口: stock_us_zh_daily
* 目标地址: http://stockdata.stock.hexun.com/us/NTES.shtml
* 描述: 中国概念股日频率的历史数据
* 限量: 单次获取指定中概股公司的历史日频率数据, 返回最近 1000 个交易日数据, 此处建议使用新浪财经数据接口获取复权后数据使用
*/
public class stock_us_zh_dailyResponse extends AkShareRequestAndResponse {
    public stock_us_zh_dailyResponse(){
        setInterfaceName("stock_us_zh_daily");
    }

    public static stock_us_zh_dailyResponse of(


    Double p_shou1pan2jia4,

    Double p_zui4di1jia4,

    LocalDateTime p_shi2jian1,

    Double p_qian2shou1pan2jia4,

    Double p_kai1pan2jia4,

    Double p_zui4gao1jia4,

    Double p_cheng2jiao1liang4,


    Map.Entry<String, String>... others){
    stock_us_zh_dailyResponse t = new stock_us_zh_dailyResponse();


    t.p_shou1pan2jia4 = p_shou1pan2jia4;

    t.p_zui4di1jia4 = p_zui4di1jia4;

    t.p_shi2jian1 = p_shi2jian1;

    t.p_qian2shou1pan2jia4 = p_qian2shou1pan2jia4;

    t.p_kai1pan2jia4 = p_kai1pan2jia4;

    t.p_zui4gao1jia4 = p_zui4gao1jia4;

    t.p_cheng2jiao1liang4 = p_cheng2jiao1liang4;


        for (Map.Entry<String, String> o : others) {
            t.other.put(o.getKey(), o.getValue());
        }

        return t;
    }



    /**
    * name: 收盘价
    * type: float
    * desc: 
    * required: 
    */
    @JsonProperty("收盘价")
    
    
    private Double p_shou1pan2jia4;

    public Double getP_shou1pan2jia4() { return this.p_shou1pan2jia4;}
    public void setP_shou1pan2jia4(Double v) { this.p_shou1pan2jia4 = v;}

    /**
    * name: 最低价
    * type: float
    * desc: 
    * required: 
    */
    @JsonProperty("最低价")
    
    
    private Double p_zui4di1jia4;

    public Double getP_zui4di1jia4() { return this.p_zui4di1jia4;}
    public void setP_zui4di1jia4(Double v) { this.p_zui4di1jia4 = v;}

    /**
    * name: 时间
    * type: str
    * desc: 
    * required: 
    */
    @JsonProperty("时间")
    
    @JsonDeserialize(using = JacksonDateTimeDeserializer.class) 
    private LocalDateTime p_shi2jian1;

    public LocalDateTime getP_shi2jian1() { return this.p_shi2jian1;}
    public void setP_shi2jian1(LocalDateTime v) { this.p_shi2jian1 = v;}

    /**
    * name: 前收盘价
    * type: float
    * desc: 
    * required: 
    */
    @JsonProperty("前收盘价")
    
    
    private Double p_qian2shou1pan2jia4;

    public Double getP_qian2shou1pan2jia4() { return this.p_qian2shou1pan2jia4;}
    public void setP_qian2shou1pan2jia4(Double v) { this.p_qian2shou1pan2jia4 = v;}

    /**
    * name: 开盘价
    * type: float
    * desc: 
    * required: 
    */
    @JsonProperty("开盘价")
    
    
    private Double p_kai1pan2jia4;

    public Double getP_kai1pan2jia4() { return this.p_kai1pan2jia4;}
    public void setP_kai1pan2jia4(Double v) { this.p_kai1pan2jia4 = v;}

    /**
    * name: 最高价
    * type: float
    * desc: 
    * required: 
    */
    @JsonProperty("最高价")
    
    
    private Double p_zui4gao1jia4;

    public Double getP_zui4gao1jia4() { return this.p_zui4gao1jia4;}
    public void setP_zui4gao1jia4(Double v) { this.p_zui4gao1jia4 = v;}

    /**
    * name: 成交量
    * type: float
    * desc: 
    * required: 
    */
    @JsonProperty("成交量")
    
    
    private Double p_cheng2jiao1liang4;

    public Double getP_cheng2jiao1liang4() { return this.p_cheng2jiao1liang4;}
    public void setP_cheng2jiao1liang4(Double v) { this.p_cheng2jiao1liang4 = v;}


    @JsonAnyGetter
    @JsonAnySetter
    private Map<String,String> other = new HashMap();
    public Map<String,String> getOther(){ return other; }
}
