
/*generated by AKShare JAVA API Generator Sun Jun 12 15:42:02 CST 2022*/
package com.onectrm.akshare.api.generated.others;

import com.onectrm.akshare.api.JacksonDateDeserializer;
import com.onectrm.akshare.api.JacksonDateTimeDeserializer;
import com.onectrm.akshare.api.AkShareRequestAndResponse;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

/**
* 分类: others
* 接口: sunrise_monthly
* 目标地址: https://www.timeanddate.com/sun/china/
* 描述: 获取中国各大城市-日出和日落时间, 数据区间从19990101-至今, 推荐使用代理访问
* 限量: 单次返回指定日期所在月份每天的数据, 如果是未来日期则为预测值
*/
public class sunrise_monthlyResponse extends AkShareRequestAndResponse {
    public sunrise_monthlyResponse(){
        setInterfaceName("sunrise_monthly");
    }

    public static sunrise_monthlyResponse of(


    Double p_Difference,

    Double p_Milkm,

    String p_Sunrise,

    String p_Start,

    String p_Length,

    String p_Start1,

    String p_Start2,

    Double p_End,

    LocalDate p_month,

    Double p_End2,

    LocalDateTime p_Time,

    Double p_Sunset,

    Double p_End1,


    Map.Entry<String, String>... others){
    sunrise_monthlyResponse t = new sunrise_monthlyResponse();


    t.p_Difference = p_Difference;

    t.p_Milkm = p_Milkm;

    t.p_Sunrise = p_Sunrise;

    t.p_Start = p_Start;

    t.p_Length = p_Length;

    t.p_Start1 = p_Start1;

    t.p_Start2 = p_Start2;

    t.p_End = p_End;

    t.p_month = p_month;

    t.p_End2 = p_End2;

    t.p_Time = p_Time;

    t.p_Sunset = p_Sunset;

    t.p_End1 = p_End1;


        for (Map.Entry<String, String> o : others) {
            t.other.put(o.getKey(), o.getValue());
        }

        return t;
    }



    /**
    * name: Difference
    * type: float
    * desc: Daylength-Difference
    * required: Y
    */
    @JsonProperty("Difference")
    
    
    private Double p_Difference;

    public Double getP_Difference() { return this.p_Difference;}
    public void setP_Difference(Double v) { this.p_Difference = v;}

    /**
    * name: Mil. km
    * type: float
    * desc: Solar Noon-Mil. km
    * required: Y
    */
    @JsonProperty("Mil. km")
    
    
    private Double p_Milkm;

    public Double getP_Milkm() { return this.p_Milkm;}
    public void setP_Milkm(Double v) { this.p_Milkm = v;}

    /**
    * name: Sunrise
    * type: str
    * desc: 日出
    * required: Y
    */
    @JsonProperty("Sunrise")
    
    
    private String p_Sunrise;

    public String getP_Sunrise() { return this.p_Sunrise;}
    public void setP_Sunrise(String v) { this.p_Sunrise = v;}

    /**
    * name: Start
    * type: str
    * desc: Astronomical Twilight-Start
    * required: Y
    */
    @JsonProperty("Start")
    
    
    private String p_Start;

    public String getP_Start() { return this.p_Start;}
    public void setP_Start(String v) { this.p_Start = v;}

    /**
    * name: Length
    * type: str
    * desc: Daylength-Length
    * required: Y
    */
    @JsonProperty("Length")
    
    
    private String p_Length;

    public String getP_Length() { return this.p_Length;}
    public void setP_Length(String v) { this.p_Length = v;}

    /**
    * name: Start.1
    * type: str
    * desc: Nautical Twilight-Start
    * required: Y
    */
    @JsonProperty("Start.1")
    
    
    private String p_Start1;

    public String getP_Start1() { return this.p_Start1;}
    public void setP_Start1(String v) { this.p_Start1 = v;}

    /**
    * name: Start.2
    * type: str
    * desc: Civil Twilight-Start
    * required: Y
    */
    @JsonProperty("Start.2")
    
    
    private String p_Start2;

    public String getP_Start2() { return this.p_Start2;}
    public void setP_Start2(String v) { this.p_Start2 = v;}

    /**
    * name: End
    * type: float
    * desc: Astronomical Twilight-End
    * required: Y
    */
    @JsonProperty("End")
    
    
    private Double p_End;

    public Double getP_End() { return this.p_End;}
    public void setP_End(Double v) { this.p_End = v;}

    /**
    * name: month
    * type: str
    * desc: 日期-索引; XXXX-XX 格式
    * required: Y
    */
    @JsonProperty("month")
    @JsonDeserialize(using = JacksonDateDeserializer.class) 
    
    private LocalDate p_month;

    public LocalDate getP_month() { return this.p_month;}
    public void setP_month(LocalDate v) { this.p_month = v;}

    /**
    * name: End.2
    * type: float
    * desc: Civil Twilight-End
    * required: Y
    */
    @JsonProperty("End.2")
    
    
    private Double p_End2;

    public Double getP_End2() { return this.p_End2;}
    public void setP_End2(Double v) { this.p_End2 = v;}

    /**
    * name: Time
    * type: str
    * desc: Solar Noon-Time
    * required: Y
    */
    @JsonProperty("Time")
    
    @JsonDeserialize(using = JacksonDateTimeDeserializer.class) 
    private LocalDateTime p_Time;

    public LocalDateTime getP_Time() { return this.p_Time;}
    public void setP_Time(LocalDateTime v) { this.p_Time = v;}

    /**
    * name: Sunset
    * type: float
    * desc: 日落
    * required: Y
    */
    @JsonProperty("Sunset")
    
    
    private Double p_Sunset;

    public Double getP_Sunset() { return this.p_Sunset;}
    public void setP_Sunset(Double v) { this.p_Sunset = v;}

    /**
    * name: End.1
    * type: float
    * desc: Nautical Twilight-End
    * required: Y
    */
    @JsonProperty("End.1")
    
    
    private Double p_End1;

    public Double getP_End1() { return this.p_End1;}
    public void setP_End1(Double v) { this.p_End1 = v;}


    @JsonAnyGetter
    @JsonAnySetter
    private Map<String,String> other = new HashMap();
    public Map<String,String> getOther(){ return other; }
}
