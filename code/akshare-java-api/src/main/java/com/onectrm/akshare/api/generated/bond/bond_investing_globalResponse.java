
/*generated by AKShare JAVA API Generator Sun Jun 12 15:42:01 CST 2022*/
package com.onectrm.akshare.api.generated.bond;

import com.onectrm.akshare.api.JacksonDateDeserializer;
import com.onectrm.akshare.api.JacksonDateTimeDeserializer;
import com.onectrm.akshare.api.AkShareRequestAndResponse;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

/**
* 分类: bond
* 接口: bond_investing_global
* 目标地址: https://cn.investing.com/rates-bonds
* 描述: 获取全球政府债券行情与收益率; 该接口需要通过代理访问, 由于涉及国家和债券多(**近1000**个债券)具体参见[国家-债券目录](https://cn.investing.com/rates-bonds/world-government-bonds?maturity_from=10&amp;maturity_to=310)
* 限量: 单次返回某一个国家的具体某一个指数, 建议用 for 循环获取多个国家的多个指数, 注意不要大量获取, 以免给对方服务器造成压力!
*/
public class bond_investing_globalResponse extends AkShareRequestAndResponse {
    public bond_investing_globalResponse(){
        setInterfaceName("bond_investing_global");
    }

    public static bond_investing_globalResponse of(


    Double p_gao1,

    Double p_shou1pan2,

    LocalDate p_ri4qi1,

    Double p_kai1pan2,

    String p_jiao1yi4liang4,

    Double p_di1,


    Map.Entry<String, String>... others){
    bond_investing_globalResponse t = new bond_investing_globalResponse();


    t.p_gao1 = p_gao1;

    t.p_shou1pan2 = p_shou1pan2;

    t.p_ri4qi1 = p_ri4qi1;

    t.p_kai1pan2 = p_kai1pan2;

    t.p_jiao1yi4liang4 = p_jiao1yi4liang4;

    t.p_di1 = p_di1;


        for (Map.Entry<String, String> o : others) {
            t.other.put(o.getKey(), o.getValue());
        }

        return t;
    }



    /**
    * name: 高
    * type: float
    * desc: 高
    * required: 
    */
    @JsonProperty("高")
    
    
    private Double p_gao1;

    public Double getP_gao1() { return this.p_gao1;}
    public void setP_gao1(Double v) { this.p_gao1 = v;}

    /**
    * name: 收盘
    * type: float
    * desc: 收盘
    * required: 
    */
    @JsonProperty("收盘")
    
    
    private Double p_shou1pan2;

    public Double getP_shou1pan2() { return this.p_shou1pan2;}
    public void setP_shou1pan2(Double v) { this.p_shou1pan2 = v;}

    /**
    * name: 日期
    * type: str
    * desc: 日期索引
    * required: 
    */
    @JsonProperty("日期")
    @JsonDeserialize(using = JacksonDateDeserializer.class) 
    
    private LocalDate p_ri4qi1;

    public LocalDate getP_ri4qi1() { return this.p_ri4qi1;}
    public void setP_ri4qi1(LocalDate v) { this.p_ri4qi1 = v;}

    /**
    * name: 开盘
    * type: float
    * desc: 开盘
    * required: 
    */
    @JsonProperty("开盘")
    
    
    private Double p_kai1pan2;

    public Double getP_kai1pan2() { return this.p_kai1pan2;}
    public void setP_kai1pan2(Double v) { this.p_kai1pan2 = v;}

    /**
    * name: 交易量
    * type: str
    * desc: 涨跌幅; 注意单位: %
    * required: 
    */
    @JsonProperty("交易量")
    
    
    private String p_jiao1yi4liang4;

    public String getP_jiao1yi4liang4() { return this.p_jiao1yi4liang4;}
    public void setP_jiao1yi4liang4(String v) { this.p_jiao1yi4liang4 = v;}

    /**
    * name: 低
    * type: float
    * desc: 低
    * required: 
    */
    @JsonProperty("低")
    
    
    private Double p_di1;

    public Double getP_di1() { return this.p_di1;}
    public void setP_di1(Double v) { this.p_di1 = v;}


    @JsonAnyGetter
    @JsonAnySetter
    private Map<String,String> other = new HashMap();
    public Map<String,String> getOther(){ return other; }
}
