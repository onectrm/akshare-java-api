
    /*generated by AKShare JAVA API Generator Mon Jun 13 13:48:50 CST 2022*/
    package com.onectrm.akshare.api.generated.others;

    import com.onectrm.akshare.api.JacksonDateDeserializer;
    import com.onectrm.akshare.api.JacksonDateTimeDeserializer;
    import com.onectrm.akshare.api.AkShareRequestAndResponse;
    import com.fasterxml.jackson.annotation.*;
    import com.fasterxml.jackson.databind.annotation.*;
    import java.time.LocalDate;
    import java.time.LocalDateTime;
    import java.util.*;

    /**
    * 分类: others
    * 接口: movie_boxoffice_realtime
    * 目标地址: https://www.endata.com.cn/BoxOffice/BO/RealTime/reTimeBO.html
    * 描述: 当前时刻的实时电影票房数据, 每 5 分钟更新一次数据, 实时票房包含今天未开映场次已售出的票房
    * 限量: 当前时刻的实时票房数据
    */
    public class movie_boxoffice_realtimeResponse extends AkShareRequestAndResponse {
    public movie_boxoffice_realtimeResponse(){
    setInterfaceName("movie_boxoffice_realtime");
    }

    public static movie_boxoffice_realtimeResponse of(


    Double p_pai2xu4,

    Double p_ying3pian4ming2cheng1,

    Double p_shi2shi2piao4fang2,

    Double p_piao4fang2zhan4bi3,

    Double p_shang4ying4tian1shu4,

    Double p_lei3ji4piao4fang2,


    Map.Entry
    <String
    , String>... others){
    movie_boxoffice_realtimeResponse t = new movie_boxoffice_realtimeResponse();


    t.p_pai2xu4 = p_pai2xu4;

    t.p_ying3pian4ming2cheng1 = p_ying3pian4ming2cheng1;

    t.p_shi2shi2piao4fang2 = p_shi2shi2piao4fang2;

    t.p_piao4fang2zhan4bi3 = p_piao4fang2zhan4bi3;

    t.p_shang4ying4tian1shu4 = p_shang4ying4tian1shu4;

    t.p_lei3ji4piao4fang2 = p_lei3ji4piao4fang2;


    for (Map.Entry
    <String
    , String> o : others) {
    t.other.put(o.getKey(), o.getValue());
    }

    return t;
    }



    /**
    * name: 排序
    * type: float
    * desc: 票房排名
    * required: Y
    */
    @JsonProperty("排序")
    
    
    private Double p_pai2xu4;

    public Double getP_pai2xu4() { return this.p_pai2xu4;}
    public void setP_pai2xu4(Double v) { this.p_pai2xu4 = v;}

    /**
    * name: 影片名称
    * type: float
    * desc: 
    * required: Y
    */
    @JsonProperty("影片名称")
    
    
    private Double p_ying3pian4ming2cheng1;

    public Double getP_ying3pian4ming2cheng1() { return this.p_ying3pian4ming2cheng1;}
    public void setP_ying3pian4ming2cheng1(Double v) { this.p_ying3pian4ming2cheng1 = v;}

    /**
    * name: 实时票房
    * type: float
    * desc: 注意单位: 万
    * required: Y
    */
    @JsonProperty("实时票房")
    
    
    private Double p_shi2shi2piao4fang2;

    public Double getP_shi2shi2piao4fang2() { return this.p_shi2shi2piao4fang2;}
    public void setP_shi2shi2piao4fang2(Double v) { this.p_shi2shi2piao4fang2 = v;}

    /**
    * name: 票房占比
    * type: float
    * desc: 注意单位: %
    * required: Y
    */
    @JsonProperty("票房占比")
    
    
    private Double p_piao4fang2zhan4bi3;

    public Double getP_piao4fang2zhan4bi3() { return this.p_piao4fang2zhan4bi3;}
    public void setP_piao4fang2zhan4bi3(Double v) { this.p_piao4fang2zhan4bi3 = v;}

    /**
    * name: 上映天数
    * type: float
    * desc: 
    * required: Y
    */
    @JsonProperty("上映天数")
    
    
    private Double p_shang4ying4tian1shu4;

    public Double getP_shang4ying4tian1shu4() { return this.p_shang4ying4tian1shu4;}
    public void setP_shang4ying4tian1shu4(Double v) { this.p_shang4ying4tian1shu4 = v;}

    /**
    * name: 累计票房
    * type: float
    * desc: 注意单位: 万
    * required: Y
    */
    @JsonProperty("累计票房")
    
    
    private Double p_lei3ji4piao4fang2;

    public Double getP_lei3ji4piao4fang2() { return this.p_lei3ji4piao4fang2;}
    public void setP_lei3ji4piao4fang2(Double v) { this.p_lei3ji4piao4fang2 = v;}


    @JsonAnyGetter
    @JsonAnySetter
    private Map
    <String
    ,String> other = new HashMap();
    public Map
    <String
    ,String> getOther(){ return other; }
    }
