
    /*generated by AKShare JAVA API Generator Mon Jun 13 13:48:49 CST 2022*/
    package com.onectrm.akshare.api.generated.dc;

    import com.onectrm.akshare.api.JacksonDateDeserializer;
    import com.onectrm.akshare.api.JacksonDateTimeDeserializer;
    import com.onectrm.akshare.api.AkShareRequestAndResponse;
    import com.fasterxml.jackson.annotation.*;
    import com.fasterxml.jackson.databind.annotation.*;
    import java.time.LocalDate;
    import java.time.LocalDateTime;
    import java.util.*;

    /**
    * 分类: dc
    * 接口: crypto_hist
    * 目标地址: https://cn.investing.com/crypto/ethereum/historical-data
    * 描述: 加密货币的历史数据主要是日频, 周频和月频的数据; 该接口需要通过代理访问
    * 限量: 单次返回指定加密货币, 频率和时间周期的数据
    */
    public class crypto_histResponse extends AkShareRequestAndResponse {
    public crypto_histResponse(){
    setInterfaceName("crypto_hist");
    }

    public static crypto_histResponse of(


    LocalDateTime p_ri4qi1,

    Double p_shou1pan2,

    Double p_kai1pan2,

    Double p_gao1,

    Double p_di1,

    Double p_jiao1yi4liang4,

    Double p_zhang3die1fu2,


    Map.Entry
    <String
    , String>... others){
    crypto_histResponse t = new crypto_histResponse();


    t.p_ri4qi1 = p_ri4qi1;

    t.p_shou1pan2 = p_shou1pan2;

    t.p_kai1pan2 = p_kai1pan2;

    t.p_gao1 = p_gao1;

    t.p_di1 = p_di1;

    t.p_jiao1yi4liang4 = p_jiao1yi4liang4;

    t.p_zhang3die1fu2 = p_zhang3die1fu2;


    for (Map.Entry
    <String
    , String> o : others) {
    t.other.put(o.getKey(), o.getValue());
    }

    return t;
    }



    /**
    * name: 日期
    * type: object
    * desc: 日期时间
    * required: 
    */
    @JsonProperty("日期")
    
    @JsonDeserialize(using =
        JacksonDateTimeDeserializer.class)
    
    private LocalDateTime p_ri4qi1;

    public LocalDateTime getP_ri4qi1() { return this.p_ri4qi1;}
    public void setP_ri4qi1(LocalDateTime v) { this.p_ri4qi1 = v;}

    /**
    * name: 收盘
    * type: float64
    * desc: 注意单位: 美元
    * required: 
    */
    @JsonProperty("收盘")
    
    
    private Double p_shou1pan2;

    public Double getP_shou1pan2() { return this.p_shou1pan2;}
    public void setP_shou1pan2(Double v) { this.p_shou1pan2 = v;}

    /**
    * name: 开盘
    * type: float64
    * desc: 注意单位: 美元
    * required: 
    */
    @JsonProperty("开盘")
    
    
    private Double p_kai1pan2;

    public Double getP_kai1pan2() { return this.p_kai1pan2;}
    public void setP_kai1pan2(Double v) { this.p_kai1pan2 = v;}

    /**
    * name: 高
    * type: float64
    * desc: 注意单位: 美元
    * required: 
    */
    @JsonProperty("高")
    
    
    private Double p_gao1;

    public Double getP_gao1() { return this.p_gao1;}
    public void setP_gao1(Double v) { this.p_gao1 = v;}

    /**
    * name: 低
    * type: float64
    * desc: 注意单位: 美元
    * required: 
    */
    @JsonProperty("低")
    
    
    private Double p_di1;

    public Double getP_di1() { return this.p_di1;}
    public void setP_di1(Double v) { this.p_di1 = v;}

    /**
    * name: 交易量
    * type: float64
    * desc: 
    * required: 
    */
    @JsonProperty("交易量")
    
    
    private Double p_jiao1yi4liang4;

    public Double getP_jiao1yi4liang4() { return this.p_jiao1yi4liang4;}
    public void setP_jiao1yi4liang4(Double v) { this.p_jiao1yi4liang4 = v;}

    /**
    * name: 涨跌幅
    * type: float64
    * desc: 
    * required: 
    */
    @JsonProperty("涨跌幅")
    
    
    private Double p_zhang3die1fu2;

    public Double getP_zhang3die1fu2() { return this.p_zhang3die1fu2;}
    public void setP_zhang3die1fu2(Double v) { this.p_zhang3die1fu2 = v;}


    @JsonAnyGetter
    @JsonAnySetter
    private Map
    <String
    ,String> other = new HashMap();
    public Map
    <String
    ,String> getOther(){ return other; }
    }
